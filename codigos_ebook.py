# -*- coding: utf-8 -*-
"""codigos_ebook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vbeMe6_HIL4Ep0RvC47R40PZggs_igNf

Códigos usados no livro
LIVRO Python, Gatos e Ciência de Dados
Bibliotecas Python

**Capítulo 3 - Pandas **

Criando um DataFrame a partir de um dicionário:

---
"""

import pandas as pd

data = {'Name': ['John', 'Alice', 'Bob'],
        'Age': [25, 30, 35],
        'City': ['New York', 'London', 'Paris']}

df = pd.DataFrame(data)
print(df)

"""Criando um DataFrame a partir de uma lista de listas:

---


"""

data = [['John', 25, 'New York'],
['Alice', 30, 'London'],
['Bob', 35, 'Paris']]
df = pd.DataFrame(data, columns=['Name', 'Age', 'City'])
print(df)

"""Carregando dados de um arquivo CSV:

---


"""

# Geração do arquivo 'data.csv' com dados com dados aleatórios, antes de rodar o próximo código.
import pandas as pd
import numpy as np

# Criando um DataFrame com 10 linhas de dados aleatórios
data = pd.DataFrame({
    'A': np.random.rand(10),
    'B': np.random.rand(10),
    'C': np.random.rand(10)
})

# Salvando o DataFrame em um arquivo CSV
data.to_csv('data.csv', index=False)

# Suponha que temos um arquivo chamado 'data.csv' com dados
df = pd.read_csv('data.csv')
print(df)

"""Removendo linhas com valores ausentes (NaN)

---


"""

import pandas as pd

# Criando um DataFrame de exemplo com valores ausentes
data = {'A': [1, 2, 3, None, 5],
        'B': [None, 2, 3, 4, 5],
        'C': [1, 2, None,None ,5]}
df = pd.DataFrame(data)

# Removendo linhas com valores ausentes
df_cleaned = df.dropna()
print("Dados Limpos:\n", df_cleaned)

import pandas as pd

# Criando um DataFrame de exemplo com valores ausentes
data2 = {'A': [1, 2, 3, None, 5],
        'B': [None, 2, 3, 4, 5],
        'C': [1, 2, None,None ,5]}
df = pd.DataFrame(data2)

# Preenchendo os valores ausentes com 0
df.fillna(0, inplace=True)
print("Dados após preenchimento com 0:\n", df)

"""**Capítulo 4 - Numpy**


---


"""

import numpy as np


# Criando array arr1  bidimensional 3x3
arr1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Criando array arr12  bidimensional 3x3
arr2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Realizando operações matemáticas com arr1 e arr2
soma = arr1 + arr2
subtracao = arr2 - arr1

# Exibindo os resultados
print("Soma:", soma)
print("Subtração:", subtracao)

"""Média (mean):

---


"""

import numpy as np

data = np.array([10, 20, 30, 40, 50])
mean_value = np.mean(data)
print(f"Média: {mean_value:.2f}")

"""Desvio padrão (standard deviation):

---


"""

# Calculando o desvio padrão
std_value = np.std(data)
print(f"Desvio Padrão: {std_value:.2f}")

"""Valor mínimo (minimum) e valor máximo (maximum):


---


"""

# Encontrando o valor mínimo e máximo
min_value = np.amin(data)
max_value = np.amax(data)
print(f"Valor Mínimo: {min_value}, Valor Máximo: {max_value}")

"""Mediana (median):

---


"""

# Criando um array com valores ímpares
odd_data = np.array([1, 3 ,5 ,7 ,9])
# Calculando a mediana
median_odd = np.median(odd_data)
print(f"Mediana (ímpar): {median_odd}")

# Criando um array com valores pares
even_data = np.array([2,4 ,6 ,8 ,10])
# Calculando a mediana
median_even = np.median(even_data)
print(f"Mediana (par): {median_even}")

"""**Capítulo 5 - Matplotlib**

---


"""

import matplotlib.pyplot as plt
import numpy as np

# Criando dados para o gráfico
x = np.linspace(0, 10, 100)
y = np.sin(x)

# Criando o gráfico de dispersão
plt.figure(figsize=(8, 6))
plt.scatter(x, y)
plt.title('Gráfico de Dispersão')
plt.xlabel('Eixo X')
plt.ylabel('Eixo Y')
plt.grid(True)
plt.show()

""" Histograma

---



"""

import matplotlib.pyplot as plt
import numpy as np

# Criando dados aleatórios
data = np.random.randn(1000)  # Dados de uma distribuição normal

# Plotando o histograma
plt.hist(data, bins=20, color='skyblue', edgecolor='black')
plt.title("Histograma")
plt.xlabel("Valores")
plt.ylabel("Frequência")
plt.show()

"""Gráfico de dispersão (scatter plot):


---


"""

# Criando dados de exemplo
x = np.random.rand(50)
y = 2 * x + np.random.randn(50)  # Relação linear com ruído

# Plotando o gráfico de dispersão
plt.scatter(x, y, color='green', marker='o')
plt.title("Gráfico de Dispersão")
plt.xlabel("X")
plt.ylabel("Y")
plt.show()

"""Gráfico de barras (bar plot):

---



"""

# Dados de exemplo
categorias = ['A', 'B', 'C', 'D']
valores = [10, 20, 15, 30]

# Plotando o gráfico de barras
plt.bar(categorias, valores, color='purple')
plt.title("Gráfico de Barras")
plt.xlabel("Categorias")
plt.ylabel("Valores")
plt.show()

"""**Capítulo 6 - Seaborn**

---


"""

import seaborn as sns
import pandas as pd

# Criando um DataFrame de exemplo
data = {'x': [1, 2, 3, 4, 5], 'y': [2, 3, 5, 7, 11]}
df = pd.DataFrame(data)

# Criando o gráfico de dispersão com linha de tendência
sns.lmplot(x='x', y='y', data=df, fit_reg=True)

# Exibindo o gráfico
plt.title('Gráfico de Dispersão com Linha de Tendência')
plt.xlabel('Eixo X')
plt.ylabel('Eixo Y')
plt.show()

"""Gráfico de Barras Agrupadas

---


"""

import seaborn as sns
import matplotlib.pyplot as plt

# Carregando um conjunto de dados exemplo
tips = sns.load_dataset('tips')

# Criando um gráfico de barras agrupadas
sns.barplot(x="day", y="tip", data=tips)
plt.show()

"""Gráfico de Dispersão com Linha de Regressão

---


"""

import seaborn as sns
import matplotlib.pyplot as plt

# Carregando um conjunto de dados exemplo
tips = sns.load_dataset('tips')

# Criando um gráfico de dispersão com linha de regressão
sns.regplot(x="total_bill", y="tip", data=tips)
plt.show()

"""Gráfico de Caixa

---


"""

import seaborn as sns
import matplotlib.pyplot as plt

# Carregando um conjunto de dados exemplo
tips = sns.load_dataset('tips')

# Criando um gráfico de caixa
sns.boxplot(x="day", y="total_bill", data=tips)
plt.show()

"""**Capítulo 7 - SciPy**

---

Resolvendo uma equação diferencial ordinária (ODE) com
scipy.integrate.odeint, utilizando NumPy Matplotlib e
plotando o resultado:


---
"""

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# Definindo a função que representa a ODE
def model(y, t):
    k = 0.3
    dydt = -k * y
    return dydt

# Condição inicial
y0 = 5

# Tempo
t = np.linspace(0, 20)

# Resolvendo a ODE
y = odeint(model, y0, t)

# Plotando o resultado
plt.plot(t, y)
plt.xlabel('Tempo')
plt.ylabel('y(t)')
plt.show()

"""Encontrando o mínimo de uma função com scipy.optimize.minimize e imprimindo o resultado:

---

"""

from scipy.optimize import minimize

# Definindo a função
def func(x):
    return x**2 + x + 2

# Valor inicial
x0 = 0

# Encontrando o mínimo
res = minimize(func, x0)

# Imprimindo o resultado
print("O mínimo da função ocorre em x =", res.x)

"""Realizando uma Transformada Rápida de Fourier (FFT) com scipy.fft.fft e

---

plotando o espectro de frequência:
"""

from scipy.fft import fft
import matplotlib.pyplot as plt

# Sinal
x = np.array([0, 1, 2, 3, 4, 5, 6, 7])

# FFT
X = fft(x)

# Plotando o espectro de frequência
plt.stem(np.abs(X))
plt.xlabel('Frequência')
plt.ylabel('Magnitude')
plt.show()